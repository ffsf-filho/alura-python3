# -*- coding: utf-8 -*-
"""Python3_Parte06_Collections_Lista_e_Tuplas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UBfTVMEw8mU2gpPKBXWryIfkjlsBUQQr

# **Listas com objetos de classes nossas**
"""

class Contacorrente:
  def __init__(self, codigo):
    self.codigo = codigo
    self.saldo = 0
  
  def deposita(self, valor):
    self.saldo += valor
  
  def __str__(self):
    return f"[>> Codigo {self.codigo} - Saldo {self.saldo} <<]"

conta_do_gui = Contacorrente(15)
print(conta_do_gui)

conta_do_gui.deposita(500)
print(conta_do_gui)

conta_da_dani = Contacorrente(47685)
conta_da_dani.deposita(1000)
print(conta_da_dani)

contas = [conta_do_gui, conta_da_dani]
for conta in contas:
  print(conta)

contas = [conta_do_gui, conta_da_dani, conta_do_gui]

print(contas[0])

conta_do_gui.deposita(100)

print(contas[0])

print(conta_do_gui)

print(contas[2])

contas[2].deposita(200)

print(conta_do_gui)

"""# **Tuplas, objetos e anemia**"""

def deposita_para_todas(contas):
  for conta in contas:
    conta.deposita(100)

contas = [conta_do_gui, conta_da_dani]
print(contas[0], contas[1])
deposita_para_todas(contas)
print(contas[0], contas[1])

contas.insert(0, 76)
print(contas[0], contas[1], contas[2])

deposita_para_todas(contas)
print(contas[0], contas[1], contas[2])

guilherme = ('Guilherme', 37, 19881) # tupla
daniele = {'Daniele', 31, 1987}

guilherme.append(6754)

conta_do_gui = (15, 1000)
# conta_do_gui.deposita() # variação OO

conta_do_gui[1]

conta_do_gui[1] += 100

def deposita(conta): # variação "funcional" (separando o comportamento dos dados)
  novo_saldo = conta[1] + 100
  codigo = conta[0]
  return (codigo, novo_saldo)

deposita(conta_do_gui)

conta_do_gui

conta_do_gui = deposita(conta_do_gui)
conta_do_gui

"""# **Tupla de objetos e lista de tuplas**"""

usuarios = [guilherme, daniele]
usuarios

usuarios.append(('Paulo', 39, 1979))
usuarios

usuarios[0][0] = "Guilherme Silveira"

conta_do_gui = Contacorrente(15)
conta_do_gui.deposita(500)
conta_da_dani = Contacorrente(234876)
conta_da_dani.deposita(1000)

contas = (conta_do_gui, conta_da_dani)

contas

for conta in contas:
  print(conta)

contas.append(423768)

contas[0].deposita(300)
for conta in contas:
  print(conta)

"""# **Listas e polimorfismo**"""

from abc import ABCMeta, abstractmethod

class Conta(metaclass=ABCMeta):
  def __init__(self, codigo):
    self._codigo = codigo
    self._saldo = 0
  
  def deposita(self, valor):
    self._saldo += valor
  
  @abstractmethod
  def passa_o_mes(self):
    pass
  
  def __str__(self):
    return f"[>> Codigo {self._codigo} - Saldo {self._saldo} <<]"

print(Conta(88))

class ContaCorrente(Conta):

  def passa_o_mes(self):
    self._saldo -= 2

class ContaPoupanca(Conta):

  def passa_o_mes(self):
    self._saldo *= 1.01
    self._saldo -= 3

class ContaIvestimento(Conta):
  pass

conta16 = ContaCorrente(16)
conta16.deposita(1000)
conta16.passa_o_mes()
print(conta16)

conta17 = ContaPoupanca(17)
conta17.deposita(1000)
conta17.passa_o_mes()
print(conta17)

conta16 = ContaCorrente(16)
conta16.deposita(1000)
conta17 = ContaPoupanca(17)
conta17.deposita(1000)
contas = [conta16, conta17]
for conta in contas:
  conta.passa_o_mes() # duck typing
  print(conta)

"""# **Arrays (*Evitar o uso*) e Numpy**

Evitaremos ussar array puro, se precisrmos de trabalho numérico, é costume usar numpy
"""

import array as arr

arr.array('d', [1, 3, 5])

arr.array('d', [1, 3, 5, 'Guilherm'])

import numpy as np
# para instalar no computador usar o comando pip install numpy

numeros = np.array([1,2,3])
numeros

numeros + 3

"""# **Método abstrato**"""

ContaIvestimento(764)

"""# **Igualdade e o __eq__**"""

class ContaSalario:
  def __init__(self, codigo):
    self._codigo = codigo
    self._saldo = 0
  
  def deposito(self, valor):
    self._saldo += valor
  
  def __eq__(self, outra_conta):
    if type(outra_conta) != ContaSalario:
      return False

    return self._codigo == outra_conta._codigo and self._saldo == outra_conta._saldo
  
  def __str__(self):
    return f"[>> Codigo {self._codigo} - Saldo {self._saldo} <<]"

class ContaMultiploSalario(ContaSalario):
  pass

conta1 = ContaSalario(37)
print(conta1)

conta2 = ContaSalario(37)
print(conta2)

conta1 == conta2

contas = [conta1]
conta1 in contas

conta2 in contas

conta1 = ContaSalario(37)
conta2 = ContaSalario(37)
print(conta1 == conta2)
conta1.deposito(100)
print(conta1 == conta2)

isinstance(Contacorrente(34), Contacorrente)

isinstance(Contacorrente(34), Conta)



"""# **Builtins como enumerated, range e desempacotamento automatico de tuplas**"""

idades = [15, 87, 32, 65, 56, 22, 49, 37]
for i in range(len(idades)):
  print(i, idades[i])

range(len(idades)) # lazy

enumerate(idades) # lazy

list(range(len(idades))) # forcei a geração dos valores

list(enumerate(idades)) # forcei a geração dos valores

for indice, valor in enumerate(idades): # unpacking da nossa tupla
  print(indice, ' X ', valor)

usuarios = [('guilherme', 37, 1981), ('Daniela', 31, 1987), ('Paulo', 39,1979)] # já desempacotando
for nome, idade, nascimento in usuarios:
  print(nome)

for nome, _, _ in usuarios: # ja desempacontando, ignorando o resto
  print(nome)

"""# **Ordenação básica**"""

sorted(idades)

15<32

print(f'Idades = {idades}')
list(reversed(idades))

sorted(idades,reverse=True)

list(reversed(sorted(idades)))

idades

idades.sort()

idades

"""# **Ordenação de objetos sem ordem natural**"""

15 < 12

nomes = ["Guilherme", "Daniela", "Paulo"]
sorted(nomes)

conta_do_guilherme = ContaSalario(17)
conta_do_guilherme.deposito(500)

conta_da_daniela = ContaSalario(3)
conta_da_daniela.deposito(1000)

conta_do_paulo = ContaSalario(133)
conta_do_paulo.deposito(510)

contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]

for conta in contas:
  print(conta)

sorted(contas)

conta_do_guilherme < conta_da_daniela

def extrai_saldo(conta):
  return conta._saldo

for conta in sorted(contas, key=extrai_saldo):
  print(conta)

from operator import attrgetter
for conta in sorted(contas, key=attrgetter('_saldo')):
  print(conta)

"""# **Implementando o __lt__**"""

conta_do_guilherme < conta_da_daniela

class ContaSalario:
  def __init__(self, codigo):
    self._codigo = codigo
    self._saldo = 0
  
  def deposito(self, valor):
    self._saldo += valor
  
  def __eq__(self, outra_conta):
    if type(outra_conta) != ContaSalario:
      return False

    return self._codigo == outra_conta._codigo and self._saldo == outra_conta._saldo
  
  def __lt__(self, outro):
    return self._saldo < outro._saldo
  
  def __str__(self):
    return f"[>> Codigo {self._codigo} - Saldo {self._saldo} <<]"

class ContaMultiploSalario(ContaSalario):
  pass

conta_do_guilherme = ContaSalario(17)
conta_do_guilherme.deposito(500)

conta_da_daniela = ContaSalario(3)
conta_da_daniela.deposito(1000)

conta_do_paulo = ContaSalario(133)
conta_do_paulo.deposito(510)

contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]

conta_do_guilherme < conta_da_daniela

conta_do_guilherme> conta_da_daniela

for conta in sorted(contas):
  print(conta)

for conta in sorted(contas, reverse=True):
  print(conta)

"""# **Ordenação completa e functools**"""

conta_do_guilherme = ContaSalario(1700)
conta_do_guilherme.deposito(500)

conta_da_daniela = ContaSalario(3)
conta_da_daniela.deposito(1000)

conta_do_paulo = ContaSalario(133)
conta_do_paulo.deposito(500)

contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]

for conta in sorted(contas, key=attrgetter("_saldo", "_codigo")):
  print(conta)

conta_do_guilherme = ContaSalario(1700)
conta_do_guilherme.deposito(500)

conta_da_daniela = ContaSalario(3)
conta_da_daniela.deposito(500)

conta_do_paulo = ContaSalario(133)
conta_do_paulo.deposito(500)

contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]

for conta in sorted(contas, key=attrgetter("_saldo", "_codigo")):
  print(conta)

class ContaSalario:
  def __init__(self, codigo):
    self._codigo = codigo
    self._saldo = 0
  
  def deposito(self, valor):
    self._saldo += valor
  
  def __eq__(self, outra_conta):
    if type(outra_conta) != ContaSalario:
      return False

    return self._codigo == outra_conta._codigo and self._saldo == outra_conta._saldo
  
  def __lt__(self, outro):
    if self._saldo != outro._saldo:
      return self._saldo < outro._saldo
    
    return self._codigo < outro._codigo
  
  def __str__(self):
    return f"[>> Codigo {self._codigo} - Saldo {self._saldo} <<]"

class ContaMultiploSalario(ContaSalario):
  pass

conta_do_guilherme = ContaSalario(1700)
conta_do_guilherme.deposito(500)

conta_da_daniela = ContaSalario(3)
conta_da_daniela.deposito(500)

conta_do_paulo = ContaSalario(133)
conta_do_paulo.deposito(500)

contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]

for conta in sorted(contas):
  print(conta)

conta_do_guilherme = ContaSalario(1700)
conta_do_guilherme.deposito(500)

conta_da_daniela = ContaSalario(3)
conta_da_daniela.deposito(1000)

conta_do_paulo = ContaSalario(133)
conta_do_paulo.deposito(500)

contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]

for conta in sorted(contas):
  print(conta)

conta_do_guilherme < conta_da_daniela

conta_do_guilherme <= conta_da_daniela

from functools import total_ordering

@total_ordering
class ContaSalario:
  def __init__(self, codigo):
    self._codigo = codigo
    self._saldo = 0
  
  def deposito(self, valor):
    self._saldo += valor
  
  def __eq__(self, outra_conta):
    if type(outra_conta) != ContaSalario:
      return False

    return self._codigo == outra_conta._codigo and self._saldo == outra_conta._saldo
  
  def __lt__(self, outro):
    if self._saldo != outro._saldo:
      return self._saldo < outro._saldo
    
    return self._codigo < outro._codigo
  
  def __str__(self):
    return f"[>> Codigo {self._codigo} - Saldo {self._saldo} <<]"

class ContaMultiploSalario(ContaSalario):
  pass

conta_do_guilherme = ContaSalario(1700)
conta_do_guilherme.deposito(500)

conta_da_daniela = ContaSalario(3)
conta_da_daniela.deposito(1000)

conta_do_paulo = ContaSalario(133)
conta_do_paulo.deposito(500)

contas = [conta_do_guilherme, conta_da_daniela, conta_do_paulo]

conta_do_guilherme <= conta_da_daniela

conta_do_guilherme <= conta_do_paulo

conta_do_guilherme < conta_do_guilherme

conta_do_guilherme == conta_do_guilherme

conta_do_guilherme <= conta_do_guilherme